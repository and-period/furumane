syntax = "proto3";

package proto.auth;

option go_package = "github.com/and-period/furumane/proto/auth";
option java_package = "jp.co.andperiod.furumane.auth";
option java_outer_classname = "AuthService";

import "validate/validate.proto";
import "proto/auth/admin.proto";
import "proto/auth/admin_auth.proto";

service AuthService {
  // 管理者サインイン（メールアドレス認証）
  rpc SignInAdmin(SignInAdminRequest) returns (SignInAdminResponse);
  // 管理者サインイン（OAuth認証）
  rpc SignInAdminWithOAuth(SignInAdminWithOAuthRequest) returns (SignInAdminWithOAuthResponse);
  // 管理者サインアウト
  rpc SignOutAdmin(SignOutAdminRequest) returns (SignOutAdminResponse);
  // 管理者アクセストークンの更新
  rpc RefreshAdminToken(RefreshAdminTokenRequest) returns (RefreshAdminTokenResponse);
  // 管理者登録（メールアドレス認証）
  rpc SignUpAdmin(SignUpAdminRequest) returns (SignUpAdminResponse);
  // 管理者登録後の確認 (メールアドレス認証)
  rpc VerifyAdmin(VerifyAdminRequest) returns (VerifyAdminResponse);
  // 管理者登録 (OAuth認証)
  rpc SignUpAdminWithOAuth(SignUpAdminWithOAuthRequest) returns (SignUpAdminWithOAuthResponse);
  // 管理者認証情報取得
  rpc GetAdmin(GetAdminRequest) returns (GetAdminResponse);
  // 管理者メールアドレス更新
  rpc UpdateAdminEmail(UpdateAdminEmailRequest) returns (UpdateAdminEmailResponse);
  // 管理者メールアドレス更新後の確認
  rpc VerifyAdminEmail(VerifyAdminEmailRequest) returns (VerifyAdminEmailResponse);
  // 管理者パスワード更新
  rpc UpdateAdminPassword(UpdateAdminPasswordRequest) returns (UpdateAdminPasswordResponse);
  // 管理者パスワードリセット (メール/SMS送信)
  rpc ForgotAdminPassword(ForgotAdminPasswordRequest) returns (ForgotAdminPasswordResponse);
  // 管理者パスワードリセット (パスワード更新)
  rpc ResetAdminPassword(ResetAdminPasswordRequest) returns (ResetAdminPasswordResponse);
  // 管理者退会
  rpc DeleteAdmin(DeleteAdminRequest) returns (DeleteAdminResponse);
}

message SignInAdminRequest {
  string key      = 1 [(validate.rules).string = {min_len: 1}]; // キー
  string password = 2 [(validate.rules).string = {min_len: 1}]; // パスワード
}

message SignInAdminResponse {
  AdminAuth auth = 1; // 認証情報
}

message SignInAdminWithOAuthRequest {
  string access_token = 1 [(validate.rules).string = {min_len: 1}]; // アクセストークン
}

message SignInAdminWithOAuthResponse {
  AdminAuth auth = 1; // 認証情報
}

message SignOutAdminRequest {
  string access_token = 1 [(validate.rules).string = {min_len: 1}]; // アクセストークン
}

message SignOutAdminResponse {}

message SignUpAdminRequest {
  string email                 = 1 [(validate.rules).string = {min_len: 1, max_len: 256, email: true}];                               // メールアドレス
  string password              = 2 [(validate.rules).string = {min_len: 8, max_len: 32, pattern: "^[a-zA-Z0-9_!@#$_%^&*.?()-=+]*$"}]; // パスワード
  string password_confirmation = 3 [(validate.rules).string = {min_len: 1}];                                                          // パスワード（確認用）
}

message RefreshAdminTokenRequest {
  string refresh_token = 1 [(validate.rules).string = {min_len: 1}]; // リフレッシュトークン
}

message RefreshAdminTokenResponse {
  AdminAuth auth = 1; // 認証情報
}

message GetAdminRequest {
  string access_token = 1 [(validate.rules).string = {min_len: 1}]; // アクセストークン
}

message GetAdminResponse {
  Admin admin = 1; // 管理者情報
}

message SignUpAdminResponse {
  string admin_id = 1 [(validate.rules).string = {min_len: 1}]; // 管理者ID
}

message VerifyAdminRequest {
  string admin_id    = 1 [(validate.rules).string = {min_len: 1}]; // 管理者ID
  string verify_code = 2 [(validate.rules).string = {min_len: 1}]; // 検証コード
}

message VerifyAdminResponse {}

message SignUpAdminWithOAuthRequest {
  string access_token = 1 [(validate.rules).string = {min_len: 1}]; // アクセストークン
}

message SignUpAdminWithOAuthResponse {
  Admin admin = 1; // 管理者情報
}

message UpdateAdminEmailRequest {
  string access_token = 1 [(validate.rules).string = {min_len: 1}];                            // アクセストークン
  string email        = 2 [(validate.rules).string = {min_len: 1, max_len: 256, email: true}]; // メールアドレス
}

message UpdateAdminEmailResponse {}

message VerifyAdminEmailRequest {
  string access_token = 1 [(validate.rules).string = {min_len: 1}]; // アクセストークン
  string verify_code  = 2 [(validate.rules).string = {min_len: 1}]; // 検証コード
}

message VerifyAdminEmailResponse {}

message UpdateAdminPasswordRequest {
  string access_token          = 1 [(validate.rules).string = {min_len: 1}];                                                          // アクセストークン
  string old_password          = 2 [(validate.rules).string = {min_len: 1}];                                                          // 現在のパスワード
  string new_password          = 3 [(validate.rules).string = {min_len: 8, max_len: 32, pattern: "^[a-zA-Z0-9_!@#$_%^&*.?()-=+]*$"}]; // 新しいパスワード
  string password_confirmation = 4 [(validate.rules).string = {min_len: 1}];                                                          // パスワード（確認用）
}

message UpdateAdminPasswordResponse {}

message ForgotAdminPasswordRequest {
  string email = 1 [(validate.rules).string = {min_len: 1, max_len: 256, email: true}]; // メールアドレス
}

message ForgotAdminPasswordResponse {}

message ResetAdminPasswordRequest {
  string email                 = 1 [(validate.rules).string = {min_len: 1, max_len: 256, email: true}];                               // メールアドレス
  string verify_code           = 2 [(validate.rules).string = {min_len: 1}];                                                          // 検証コード
  string new_password          = 3 [(validate.rules).string = {min_len: 8, max_len: 32, pattern: "^[a-zA-Z0-9_!@#$_%^&*.?()-=+]*$"}]; // 新しいパスワード
  string password_confirmation = 4 [(validate.rules).string = {min_len: 1}];                                                          // パスワード（確認用）
}

message ResetAdminPasswordResponse {}

message DeleteAdminRequest {
  string admin_id = 1 [(validate.rules).string = {min_len: 1}]; // 管理者ID
}

message DeleteAdminResponse {}
